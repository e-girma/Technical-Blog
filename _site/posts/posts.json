[
  {
    "path": "posts/2022-03-18-introduction-to-r-for-plant-breeding/",
    "title": "Introduction to R For Plant Breeding",
    "description": "R is a great, open-source software for working with plant breeding data! Over the last year, I have been using R as my primary tool for data analysis. In this blog post, I give a quick introduction to R for plant breeders.",
    "author": [
      {
        "name": "Ellena Girma",
        "url": "https://rforplantbreeders.netlify.app/about.html"
      }
    ],
    "date": "2022-04-12",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nInstalling & Setting Up R\r\nPackages\r\nPlant Breeding Packages you should consider installing\r\n\r\nProgramming with R\r\nBasic Arithmetic\r\nAssigning variables\r\nData Types and Structures\r\nBasic Data Types in R\r\nData Structures\r\n\r\n\r\n\r\nInstalling & Setting Up R\r\nTo use R, you should download R and RStudio.\r\nI have some resources linked on my  resources page that will help you get R and RStudio set up. You will also find some resources on getting yourself familiar with R Studio’s Interface.\r\nWhen you are ready to start working on your data, you should set your working directory to a specific folder. It should be where you have your data saved. Setting your working directory to this folder will also allow you to easily save any output files (like plots) to the same folder.\r\n\r\n\r\n#set working directory by adding file path like below \r\n#setwd(\"C:/Users/eruph/Documents/Technical-Blog_EG/Technical-Blog/_posts/2022-03-18-introduction-to-r-for-plant-breeding\")\r\n\r\n#check working directory\r\ngetwd()\r\n\r\n\r\n[1] \"C:/Users/eruph/Documents/Technical Blog_EG/Technical-Blog/_posts/2022-03-18-introduction-to-r-for-plant-breeding\"\r\n\r\nAll code lines that start with a hash/number(#) sign are comment lines. Comments help you and others who read your code understand what that code line or section is doing. If you put the # in front of a code line, that code will not run. Putting # in front of a code line is helpful when testing what different lines of code do.\r\nPackages\r\nPackages in R Studio are how you will access the functions you want to use/run. There are two main things you have to do when you want to use an R package:\r\nCheck if the package is installed; if not, install it\r\nOnce installed, load the package\r\nThere are two ways to install a package in R. The first way is by going to the ‘Packages’ tab on the bottom right window. The second way is to do it using code. Below is an example of installing and loading tidyverse, a collection of R packages.\r\n\r\n\r\n#installing the tidyverse package\r\n#install.packages(\"tidyverse\")\r\n# Loading tidverse for the session\r\n#library(tidyverse)\r\n\r\n\r\n\r\nSome of the packages included in core tidyverse are:\r\n ggplot2 : package useful for creating graphics\r\n dplyr : good for data manipulation\r\n tidyr : cleaning data\r\n readr : reading rectangular data (each column is a variable and row is a record)\r\nLearn more about the tidyverse  here .\r\nPlant Breeding Packages you should consider installing\r\n metan  for multi-environmental data\r\n statgenGxE \r\n statgenSTA\r\nlme4  for multi-level models\r\ngapit for Genome Wide Association Study (GWAS) and Genomic Selection (GS)\r\nProgramming with R\r\nBasic Arithmetic\r\nIn R, you can run mathematical operations & functions, logarithms, exponentials, etc. Below are some examples. When you run each line of code, the answer will be shown in the console window (bottom left window) of RStudio’s interface.\r\n\r\n\r\n12 + 2 #addition\r\n\r\n\r\n[1] 14\r\n\r\n12 - 2 #subtraction\r\n\r\n\r\n[1] 10\r\n\r\n12 * 2 #multiplication\r\n\r\n\r\n[1] 24\r\n\r\n12 / 2 #division\r\n\r\n\r\n[1] 6\r\n\r\n12 ^ 2 #exponentiation\r\n\r\n\r\n[1] 144\r\n\r\nlog2(16) #log\r\n\r\n\r\n[1] 4\r\n\r\nsqrt(16) #square root\r\n\r\n\r\n[1] 4\r\n\r\nAssigning variables\r\nIn R, you will often need to store values or an object because you want to use it in another function. This is called assigning. Assigning a value or object to a variable will save it in your environment to be used later.\r\n\r\n\r\n#Assigning value 4 to x\r\nx <- 4\r\n#Assigning value 6 to y\r\ny <- 6\r\n#Assigning z and using x & y\r\nz <- x + y\r\n\r\n#Assigning an example dataset from datasets base r to a variable \r\nplant_growth <- datasets::PlantGrowth\r\n\r\n\r\n\r\nData Types and Structures\r\nBasic Data Types in R\r\ncharacter: “text”\r\nnumeric: 12, 4.5\r\ninteger: 2, 3\r\nlogical: TRUE, FALSE\r\nUse the function class() to check the data type of a saved object, column, or columns in the entire dataset.\r\n\r\n\r\n#calling first 6 rows of dataset loaded earlier\r\nhead(plant_growth)\r\n\r\n\r\n  weight group\r\n1   4.17  ctrl\r\n2   5.58  ctrl\r\n3   5.18  ctrl\r\n4   6.11  ctrl\r\n5   4.50  ctrl\r\n6   4.61  ctrl\r\n\r\n#class of dataset\r\nclass(plant_growth)\r\n\r\n\r\n[1] \"data.frame\"\r\n\r\n#class of specific column in dataset called group \r\nclass(plant_growth$group)\r\n\r\n\r\n[1] \"factor\"\r\n\r\nData Structures\r\nVectors are one-dimensional arrays that can only store one data type.\r\nMatrices are two-dimensional tables.\r\nFactors are used to store categorical data like eye color or plant variants/lines.\r\nData frames are data stored in table format where columns are variables and rows are records.\r\nLists: can hold different data types\r\nUse the function str() to check the data structure of an object.\r\n\r\n\r\n#vector \r\nalphabet <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")\r\nstr(alphabet)\r\n\r\n\r\n chr [1:7] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\"\r\n\r\n#matrix\r\nmatrix_1 <- matrix(c(5,6,7,8,9,10), nrow = 2, ncol = 3)\r\nstr(matrix_1)\r\n\r\n\r\n num [1:2, 1:3] 5 6 7 8 9 10\r\n\r\n#factor\r\nprimary_colors <- factor( c(\"red\", \"yellow\", \"blue\"))\r\nstr(primary_colors)\r\n\r\n\r\n Factor w/ 3 levels \"blue\",\"red\",\"yellow\": 2 3 1\r\n\r\n#data.frame\r\ndata_frame_1 <- data.frame (\r\n  Variety = c(\"SCN 11\", \"Embean 11\", \"Jesca\"),\r\n  Yield = c(1200, 1550, 1320),\r\n  Seed_weight = c(60, 30, 45)\r\n)\r\nstr(data_frame_1)\r\n\r\n\r\n'data.frame':   3 obs. of  3 variables:\r\n $ Variety    : chr  \"SCN 11\" \"Embean 11\" \"Jesca\"\r\n $ Yield      : num  1200 1550 1320\r\n $ Seed_weight: num  60 30 45\r\n\r\n#list\r\nenvironments <- list(\"Arusha\", \"Lyamungu\", \"Uyole\")\r\nstr(environments)\r\n\r\n\r\nList of 3\r\n $ : chr \"Arusha\"\r\n $ : chr \"Lyamungu\"\r\n $ : chr \"Uyole\"\r\n\r\nR is a great tool that more plant breeders can use to conduct their analysis. R can be used to explore your data before performing more specific analysis. You can easily get descriptive statistics or make exploratory plots to show data distribute or variance. You can also conduct Analysis of Variance (ANOVA), Principal Component Analysis (PCA), and create AMMI Biplots & GGE Biplots.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-04-12T17:13:55+03:00",
    "input_file": "introduction-to-r-for-plant-breeding.knit.md"
  }
]
