[
  {
    "path": "posts/importing-data-into-R/",
    "title": "Importing Data into R",
    "description": "Usually, people start with data in different file types. In R, file types tend to require their own importing functions. In this post, I will cover how to import data into R from the most common file types.",
    "author": [
      {
        "name": "Ellena Girma",
        "url": "https://rforplantbreeders.netlify.app/about.html"
      }
    ],
    "date": "2022-05-11",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nSome things to take care of before we start importing\r\nData\r\nR Workspace\r\nWorking Directory\r\n\r\nOther Things to Remember!\r\nStructure and Format of Your Data\r\nExcel files\r\nXLConnect\r\nreadxl\r\n\r\nCSV and TXT files\r\nutils package\r\nCSV files using utils\r\nTXT files using utils\r\n\r\nreadr package\r\n\r\nWeb Sources\r\nCSV and TXT files from web using readr package\r\nexcel files from web using utils package\r\n\r\nBonus Links\r\nLast updated on\r\n\r\n\r\nUsually, people start with data in different file types. This can make importing data feel overwhelming since different file types tend to require their own function. In this blog, I’ll cover how to import data into R from the most common file types.\r\nSome things to take care of before we start importing\r\nData\r\nIf you have locally saved data ready to be imported, make sure you know the folder’s location. If you don’t have access to data right now but still want to practice, I suggest using data from this paper. 1 The data contains information about the seed yield, 100 seed weight, number of seeds/pod, number of pods/plant, and days to 75% flowering for 99 common bean variants grown in 3 locations. The data is listed in Appendix A. Supplementary data.\r\nR Workspace\r\nMake sure you clear your RStudio environment, or you have opened a new session. To open a new session, go to the Session tab and choose New Session. If you want to clear your workspace without opening a new session, go to the Environment tab on the top-right window. Then, click the broom icon to clear your environment.\r\nWorking Directory\r\nYour working directory is where R will look for files you want to import. I suggest setting your working directory to the folder that has your data. Set your working directory using the function setwd(“localfilepath”). Setting your working directory is also useful when you want to save files in a specific folder.\r\nR can also import files from folders that have not been set as the working directory. To do this, specify the folder’s file path in the importing function.\r\nOther Things to Remember!\r\nAssign names to imported data. It will make it easier to call on the data within other functions. You can assign names by using R’s assignment operator.\r\nDo not assign the same name to more than one object.\r\nWhen assigning names, you can use letters, numbers, periods, or underscores. However, the variable name needs to start with a letter or a dot not followed by a number.\r\nMake sure to include comments (using # before the comment) in your code so you can remember what your code does.\r\nUse install.packages() to install the packages you do not have.\r\nUse library() to load all packages into your current environment.\r\nStructure and Format of Your Data\r\nTo import data into R, it’s important to know what file type you are starting with. Once you know what kind of data you’re starting with, you can install and load the corresponding package. The most common data file types are excel files, CSV files, and TXT files. The data you want to work with might also be on the web.\r\nExcel files\r\nFor excel files, you can use the XLConnect package or package the readxl .\r\nXLConnect\r\nXLConnect lets you work on excel through R’s interface. Using XLConnect, you can create or load an existing workbook. Then, you can read data from one of the excel sheets or input data from R into a worksheet. Below, I show how to load in an existing workbook, get the names of the sheets in the workbook, then read data from a worksheet in the workbook.\r\n\r\n\r\n#load the package into R session\r\nlibrary(XLConnect)\r\n\r\n#setting file path to an object\r\nfile_path_xl <- \"C:/Users/eruph/Documents/TB/Importing_Blog/workbook.xlsx\"\r\n\r\n#create connection to an existing excel file to R using file path object\r\nwb <- loadWorkbook(file_path_xl, create = FALSE) #set create = TRUE if you want to create a new file\r\n\r\n#get names of all worksheets in your workbook\r\ngetSheets(wb)\r\n\r\n\r\n[1] \"Sheet1\" \"Sheet2\"\r\n\r\n#reading data from worksheet 2 specifying start & end of cols & rows\r\nwb_2 <- readWorksheet(wb, sheet = \"Sheet2\", startRow = 3, startCol = 1, endRow = 15, endCol = 3)\r\n\r\n\r\n\r\nreadxl\r\nThe readxl package can be used to load data from .xls and .xlsx formats. Below I load and xls file and an xlsx file using the read_excel() and real_xlsx() functions.\r\n\r\n\r\n#load the package into R session\r\nlibrary(readxl)\r\n\r\n#setting file path\r\nfile_path_xls <- \"C:/Users/eruph/Documents/TB/Importing_Blog/read.xls\"\r\n\r\n#importing .xls or .xlsx into R\r\nxls_data <- read_excel(path = file_path_xls, sheet = 1, col_names = TRUE)\r\n\r\n#list sheet names in the excel file\r\nexcel_sheets(file_path_xls)\r\n\r\n\r\n[1] \"Sheet1\" \"Sheet2\" \"Sheet3\"\r\n\r\n#setting file path\r\nfile_path_xlsx <- \"C:/Users/eruph/Documents/TB/Importing_Blog/read2.xlsx\"\r\n\r\n#reading data from specific cells (example, cells F3 to H12)\r\ndata <- read_xlsx(file_path_xlsx, sheet = 3, range = 'F3:H12')\r\n\r\n\r\n\r\nCSV and TXT files\r\nCSV files separate information using commas or semi-colons, while TXT files use tabs to separate information. I have grouped CSV and TXT files together because they can be imported using either the utils package or the readr package.\r\nutils package\r\nCSV files using utils\r\nFor CSV files, check if your file is separated by commas or semicolons. Use read.csv() if your file is comma-separated and read.csv2() if it is semi semicolon-separated.\r\n\r\n\r\n#setting file path\r\nfile_path_csv <- \"C:/Users/eruph/Documents/TB/Importing_Blog/csvfile.csv\"\r\n\r\n#reading data while specifying the the data is comma separated and that the first row has header names\r\ncsv_df <- read.csv(file_path_csv, header = TRUE, sep = \",\")\r\n\r\n\r\n\r\nTXT files using utils\r\nTo read TXT files using utils, you can use the read.table() or the read.delim() functions.\r\n\r\n\r\n#setting file path\r\nfile_path_txt <- \"C:/Users/eruph/Documents/TB/Importing_Blog/environment_txt.txt\"\r\n\r\n#importing file with the first row as variable names and add blank field/s to rows with missing values\r\nenvironment_txt <- read.table(file_path_txt, header = TRUE, sep = \"\", fill = T)\r\n\r\n\r\n\r\nread.table() and read.delim() from the utils package can be used for other file types. As shown above, I used read.table() for importing a text file. However, it can also be used to import CSV files. When using these two functions, look at the sep (separator) argument. Assign the character used to separate information in the document type you are importing to the sep argument.\r\nR documentation is a great resource to learn more about more about utils functions. You can also run ?function_name() to get more information about a function within RStudio.\r\nreadr package\r\nThe readr package loads data faster than the utils package. All of readr’s import functions start with read_ and are followed by the file format type. Here are some examples:\r\nread_csv(): comma-separated values (CSV) files\r\nread_tsv(): tab-separated values (TSV) files\r\nread_delim(): delimited files\r\nCheck out the readr page to get a more detailed look at the package.\r\nWeb Sources\r\nSometimes, the data you need will be on the web. The readr and utlis packages can be used to get CSV, TXT and excel format data from the web.\r\nCSV and TXT files from web using readr package\r\nTo import CSV and txt files using the readr package, pass the web link into either the read_csv() or the read_tsv() function. Take a look at the example code below.\r\n\r\n\r\n#assign the link to an object\r\nurl_csv <- \"http://link.csv\"\r\n\r\n#call object with link to import the data\r\n#data_web <- read_csv(url_csv)\r\n\r\n#assign the link to an object\r\nurl_delim <- \"http://link.txt\"\r\n\r\n#call object with link to import the data\r\n#data_web <- read_tsv(url_delim)\r\n\r\n\r\n\r\nexcel files from web using utils package\r\nTo import excel files from the web, use the utils package. First download the file using download.file(), then read the file using read_excel().\r\n\r\n\r\n#download.file(url, destfile = destination_path)\r\n#web_excel <- read_excel(destination_path)\r\n\r\n\r\n\r\nBonus Links\r\nIncase this blog post did not cover the data source you used, please check out some of the resources I have listed below. Hopefully, one of them will cover your data source.\r\njson files from web sources using the jsonlite package\r\nSAS/SPSS/Stata files using the haven package\r\nAdditionally, if you want to practice some R code on importing flat files, such as csv and delimited files, try out the first free chapter on DataCamp’s Importing Data in R course.\r\n\r\nVisitors\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-05-11T11:27:26+03:00",
    "input_file": "importing-data.knit.md"
  }
]
